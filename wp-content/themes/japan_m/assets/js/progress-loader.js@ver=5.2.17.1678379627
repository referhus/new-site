;
(function(app) {
    'use strict'

    var ProgressLoader = function() {}

    ProgressLoader.satellite = new TimelineMax({ paused: true })
    ProgressLoader.stroke = new TimelineMax({ paused: true })

    var initialPercent = 0
    var totalPercent = 0
    if (window.innerHeight > window.innerWidth) {
        initialPercent = 30
        totalPercent = 70
    } else {
        initialPercent = 0
        totalPercent = 100
    }

    ProgressLoader.prototype.init = function() {
        var _self = this

        TweenMax.set($('.stroke-hover'), { drawSVG: String(initialPercent) + '%' })
        var motionPath = MorphSVGPlugin.pathDataToBezier('.stroke-path')
        TweenMax.set('.img-satellite', {
            xPercent: -50,
            yPercent: -50,
            transformOrigin: 'center center',
            force3D: false
        })

        ProgressLoader.satellite.to('.img-satellite', 1, {
            bezier: { values: motionPath, type: 'cubic' },
            force3D: false,
            ease: Linear.easeNone,
            onComplete: function() {
                // app.Animation.prototype.preloaderTransition()
                // console.log('test')
            }
        })

        ProgressLoader.stroke.to('.stroke-hover', 1, { drawSVG: String(totalPercent) + '%', force3D: false, ease: Linear.easeNone })
    }
    var inc = 0
    var prog = 0
    var per = 0

    ProgressLoader.prototype.progressAnimate = function(progress, total, totalItemToLoad) {
        // console.log(inc)
        if (window.innerWidth < 768) {
            var d = (totalPercent - initialPercent) / 100;
            var totalImageLoad = totalItemToLoad;
            var p = parseFloat((d / totalImageLoad).toFixed(3))
            prog = parseFloat((p * inc) / d).toFixed(2)
            per = parseFloat(parseFloat((initialPercent / 100) + (p * inc)).toFixed(2)) * 100

            var percentage = parseFloat((prog * 100).toFixed(0))
            $('.content__preloader .percent').html(percentage + '%')
            ProgressLoader.satellite.progress(per / 100).pause()
            TweenMax.set('.stroke-hover', { drawSVG: per + '%' })
            inc++
        } else {
            var percentage = parseFloat((progress * 100).toFixed(0))
            $('.content__preloader .percent').html(percentage + '%')
            ProgressLoader.satellite.progress(percentage / 100).pause()
            TweenMax.set('.stroke-hover', { drawSVG: percentage + '%' })
        }
    }

    app.ProgressLoader = ProgressLoader

    app.ready(function() {
        // console.log('ProgressLoader Ready')
        ProgressLoader.prototype.init()
    })

    app.onLoad(function() {
        // var Cont = { val: 90 }
        // TweenMax.to(Cont, 1, {
        //     val: 100, roundProps: 'val', onUpdate: function () {
        //         $('.content__preloader .percent').html(Cont.val + '%')
        //         ProgressLoader.satellite.progress(Cont.val / 200).pause()
        //         TweenMax.set('.stroke-hover', { drawSVG: Cont.val + "%" })
        //     }, onComplete: function () {
        //         app.Animation.prototype.preloaderTransition()
        //     }
        // })
    })
})(window.app)